---

- set_fact:
    obj: "{{ item }}"

- name: "(04) checking existence of patch id:{{ obj.value.id }}"
  become: true
  stat:
    path: "{{ general.download_dir }}/{{ obj.value.filename }}"
  register: patch_exists

# extract patch id original checksum
- name: "(04) acquire red hat single sign-on {{ obj.value.id }} origin patch checkum facts"
  set_fact:
    patch_checksum: "{{ obj.value.sha256checksum }}"
  when: patch_exists.stat.exists

- stat:
    path: "{{ general.download_dir }}/{{ obj.value.filename }}"
    checksum_algorithm: sha256
  register: checksum_result
  when: patch_exists.stat.exists

- name: "(04) deleting patch id:{{ obj.value.id }} - reason: checksum failed or download corrupted."
  file: path={{ item }} state=absent
  with_items:
    - "{{ general.download_dir }}/{{ obj.value.filename }}"
  ignore_errors: true
  when: patch_exists.stat.exists and (checksum_result.stat.checksum != patch_checksum)

- name: "(04) downloading red hat single sign-on patch id:{{ obj.value.id }}"
  redhat_csp_download: 
    url: "{{ obj.value.url }}"
    dest: "{{ general.download_dir }}/{{ obj.value.filename }}"
    username: "{{ rhn_username }}"
    password: "{{ rhn_password }}"
  vars:
    debug:
      msg: "downloading {{ obj.key }} : {{ obj.value.id }} from: {{ obj.value.url }}"
  async: 600
  poll: 0
  register: patch_download_request
  when: not patch_exists.stat.exists

- name: "(04) check on red hat single sign-on {{ rhsso_artifact_version }} patch id:{{ obj.value.id }} download thread"
  async_status: jid={{ patch_download_request.ansible_job_id }}
  register: jobs_result
  until: jobs_result.finished
  retries: 60
  delay: 10
  when: not patch_exists.stat.exists