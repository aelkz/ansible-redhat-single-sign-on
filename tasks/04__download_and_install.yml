---

- name: "(04) acquire red hat single sign-On {{ rhsso_artifact_version }} directory configuration facts"
  set_fact:
    jboss_eap_home: "{{ general.install_dir }}/{{ general.home_dir_name }}"
  tags:
    - install
    - patches

- name: "(04) acquire red hat single sign-on {{ rhsso_artifact_version }} directory configuration facts"
  set_fact:
    jboss_eap_bin_dir: "{{ jboss_eap_home }}/bin"
    jboss_eap_domain_home: "{{ general.install_dir }}/{{ general.home_dir_name }}/domain/configuration"
  tags:
    - install
    - patches

- name: "(04) acquire red hat single sign-on {{ rhsso_artifact_version }} directory configuration facts"
  set_fact:
    jboss_eap_checksum: "{{ rhsso_artifact_checksums[rhsso_artifact_version] }}"
    jboss_eap_runtime_conf_src_file: "{{ jboss_eap_bin_dir }}/domain.conf"
    jboss_eap_runtime_conf_file: "/etc/default/{{ general.instance_name }}.conf"
    jboss_eap_service_src_file: "{{ jboss_eap_bin_dir }}/init.d/jboss-eap-rhel.sh"
    jboss_eap_initd_service_file: "/etc/init.d/{{ general.instance_name }}"
    jboss_eap_pid_directory: "/var/run/{{ general.home_dir_name }}"
    jboss_eap_pid_file: "/var/run/{{ general.home_dir_name }}/{{ general.instance_name }}.pid"
    jboss_eap_log_directory: "/var/log/{{ general.home_dir_name }}"
    jboss_eap_log_file: "/var/log/{{ general.home_dir_name }}/{{ general.instance_name }}.log"
    jboss_eap_java_opts: "{{ jvm_java_opts | default('') if jvm_java_opts is defined else '' }}"
    jboss_eap_host_type: "{{ jboss.host_type }}"
  tags:
    - install
    - patches

- name: "(04) acquire red hat single sign-on {{ rhsso_artifact_version }} JVM configuration facts"
  set_fact:
    jboss_eap_java_opts: "{{ (jboss_eap_java_opts + ' ' + item) | trim }}"
  with_items:
    - "{{ '-Duser.timezone=' + config.timezone_main }}"
    - "{{ '-Duser.language=' + config.timezone_language }}"
    - "{{ '-Duser.country=' + config.timezone_country }}"
    - "{{ '-Djava.net.preferIPv4Stack=true' }}"
    - "{{ '-Djava.security.egd=file:/dev/./urandom' }}"
    - "{{ '-Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS -Djava.awt.headless=true' }}"
    - "{{ '-server -XX:+DoEscapeAnalysis -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:MaxGCPauseMillis=500 -XX:+UseLargePages' }}"
    - "{{ '-Xmx' + jvm_xmx + ' -Xms' + jvm_xms + ' -verbose:gc -Xloggc:gc.log.`date +%d%m%Y%H%M%S` -XX:+PrintGCDetails' }}"
    - "{{ '-XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+AggressiveOpts -XX:+UseCompressedOops' }}"
    - "{{ '-XX:+UseCompressedClassPointers -XX:CompressedClassSpaceSize=' + compressedClassSpaceSize + ' -XX:MetaspaceSize=' + metaspaceSize + ' -XX:MaxMetaspaceSize=' + maxMetaspaceSize }}"
    - "{{ '-Djboss.server.base.dir=' + general.home_dir_name }}"
  tags:
    - install

- name: "(04) check to see if pip is already installed"
  command: "pip --version"
  ignore_errors: true
  register: pip_is_installed
  changed_when: "False"
  tags:
    - install

- name: "(04) download get-pip.py"
  get_url: "url=https://bootstrap.pypa.io/get-pip.py dest=/tmp/get-pip.py"
  when: pip_is_installed.rc != 0
  tags:
    - install

# Install pip if it's not already installed, or if
# the desired versions of pip aren't installed
# The regular expression extracts '9.0' out of '9.0.*'
- name: "(04) install pip"
  command: "python get-pip.py"
  when: pip_is_installed.rc != 0
  args:
    chdir: /tmp
  tags:
    - install

- name: "(04) install pip module: lxml"
  pip:
    name: lxml
  tags:
    - install

- name: "(04) install pip module: requests"
  pip:
    name: requests
  tags:
    - install

- name: "(04) create group for red hat single sign-On"
  group:
    name: "{{ item.group }}"
    system: yes
    state: present
    gid: "{{ item.group_id }}"
  with_items:
    - "{{ owner }}"
  tags:
    - install

- name: "(04) create user for red hat single sign-on"
  user:
    name: "{{ item.user }}"
    comment: "{{ item.user }} user for Red Hat Single Sign-On {{ rhsso_artifact_version }}"
    uid: "{{ item.group_id }}"
    group: "{{ item.group }}"
    home: "{{ general.install_dir }}/{{ general.home_dir_name }}"
    shell: "/bin/bash"
  with_items:
    - "{{ owner }}"
  tags:
    - install

- name: "(04) create .bashrc file for the {{ owner.user }} user"
  template:
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    src: .bashrc.j2
    dest: "{{ jboss_eap_home }}/.bashrc"
    mode: "0644"
  with_items:
    - "{{ owner }}"
  tags:
    - install

- name: "(04) check existence of red hat single sign-on"
  become: true
  stat:
    path: "{{ jboss_eap_home }}"
  register: rhsso_installation_exists
  tags:
    - install

- name: "(04) check existence of red hat single sign-on zip file"
  become: true
  stat:
    path: "{{ general.download_dir }}/{{ rhsso_artifact_name }}"
  register: rhsso_zip_package_exists
  tags:
    - install

- name: "(04) checksum existing rhsso server zip file"
  block:
  - stat:
      path: "{{ general.download_dir }}/{{ rhsso_artifact_name }}"
      checksum_algorithm: sha256
    register: server

  - name: "(04) remove existing zip corrupted artifact"
    file: path={{ item }} state=absent
    with_items:
      - "{{ general.download_dir }}/{{ rhsso_artifact_name }}"
    when: server.stat.checksum != jboss_eap_checksum
  when: rhsso_zip_package_exists.stat.exists
  tags:
    - install

- name: "(04) check existence of red hat single sign-on zip file"
  become: true
  stat:
    path: "{{ general.download_dir }}/{{ rhsso_artifact_name }}"
  register: rhsso_zip_package_exists
  tags:
    - install

- name: "(04) async download jboss eap from red hat customer portal"
  redhat_csp_download:
    url: "{{ rhsso_artifact_url }}"
    dest: "{{ general.download_dir }}/{{ rhsso_artifact_name }}"
    username: "{{ rhn_username }}"
    password: "{{ rhn_password }}"
  async: 7200
  poll: 0
  register: csp_rhsso_download
  no_log: true
  when: not rhsso_zip_package_exists.stat.exists
  tags:
    - install

- name: "(04) check on red hat single sign-on {{ rhsso_artifact_version }} download completion"
  async_status: jid={{ csp_rhsso_download.ansible_job_id }}
  register: job_result1
  until: job_result1.finished
  retries: 600
  delay: 10
  when: not rhsso_zip_package_exists.stat.exists
  tags:
    - install

- name: "(04) checksum rhsso server zip file"
  block:
  - stat:
      path: "{{ general.download_dir }}/{{ rhsso_artifact_name }}"
      checksum_algorithm: sha256
    register: server

  - fail:
      msg: "Failure, downloaded {{ rhsso_artifact_name }} file is corrupted."
    when: server.stat.checksum != jboss_eap_checksum
  tags:
    - install

- name: "(04) remove existing installation"
  file: path={{ item }} state=absent
  with_items:
    - "{{ jboss_eap_home }}"
  when: rhsso_installation_exists.stat.exists
  tags:
    - install

- name: "(04) check existence again of red hat single sign-on zip file"
  become: true
  stat:
    path: "{{ general.download_dir }}/{{ rhsso_artifact_name }}"
  register: rhsso_zip_package_exists
  tags:
    - install

- fail:
    msg: "Failure, can't download {{ rhsso_artifact_name }} artifact from rhcsp."
  when: not rhsso_zip_package_exists.stat.exists
  tags:
    - install

- name: "(04) extract red hat sign-on {{ rhsso_artifact_version }}"
  become: true
  unarchive:
    src: "{{ general.download_dir }}/{{ rhsso_artifact_name }}"
    dest: "{{ general.install_dir }}"
    creates: "{{ general.home_dir_name }}"
    copy: no
    owner: "{{ owner.user }}"
    group: "{{ owner.group }}"
  when: rhsso_zip_package_exists.stat.exists and server.stat.checksum == jboss_eap_checksum
  tags:
    - install

- name: "(04) change permissions on {{ jboss_eap_home }} installation directory"
  file:
    state: directory
    recurse: yes
    path: "{{ jboss_eap_home }}"
    owner: "{{ owner.user }}"
    group: "{{ owner.group }}"
  tags:
    - install

# /var/log/rh-sso-7.2
- name: "(04) create {{ jboss_eap_log_directory }} log directory"
  file:
    path: "{{ jboss_eap_log_directory }}"
    owner: "{{ owner.user }}"
    group: "{{ owner.group }}"
    state: directory
    mode: "755"
  tags:
    - install

# /var/run/rh-sso-7.2
- name: "(04) create {{ general.instance_name }} service runtime data directory"
  file:
    path: "{{ jboss_eap_pid_directory }}"
    owner: "{{ owner.user }}"
    group: "{{ owner.group }}"
    state: directory
    mode: "755"
  tags:
    - install

# /etc/init.d/rh-sso
- name: "(04) copy {{ jboss_eap_service_src_file }} service file to {{ jboss_eap_initd_service_file }}"
  become: true
  copy:
    src: "{{ jboss_eap_service_src_file }}"
    dest: "{{ jboss_eap_initd_service_file }}"
    remote_src: True
    owner: "{{ owner.user }}"
    group: "{{ owner.group }}"
    mode: "755"
  tags:
    - install

# /etc/default/rh-sso.conf
- name: "(04) copy {{ jboss_eap_runtime_conf_src_file }} configuration file to {{ jboss_eap_runtime_conf_file }}"
  template:
    owner: "{{ owner.user }}"
    group: "{{ owner.group }}"
    src: jboss-eap.conf.j2
    dest: "{{ jboss_eap_runtime_conf_file }}"
    mode: "755"
  tags:
    - install

- name: "(04) modify {{ jboss_eap_initd_service_file }} file"
  lineinfile:
    state: present
    path: "{{ jboss_eap_initd_service_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - {regexp: "^# processname:", line: "# processname: {{ general.instance_name }}"}
    - {regexp: "^# pidfile:", line: "# pidfile: {{ jboss_eap_pid_file }}"}
    - {regexp: "^# config:", line: "# config: {{ jboss_eap_runtime_conf_file }}"}
    - {regexp: "JBOSS_CONF=", line: "JBOSS_CONF='{{ jboss_eap_runtime_conf_file }}'"}
    - {regexp: "^  JBOSS_NAME", line: "JBOSS_NAME='{{ general.instance_name }}'"}
  tags:
    - install

- name: "(04) clear {{ general.instance_name }} jvm JAVA_OPTS"
  lineinfile:
    dest: "{{ jboss_eap_runtime_conf_file }}"
    regexp: '^JAVA_OPTS="-Xms'
    state: absent
  tags:
    - install

- name: "(04) set {{ general.instance_name }} jvm JAVA_OPTS"
  lineinfile:
    dest: "{{ jboss_eap_runtime_conf_file }}"
    line: "JAVA_OPTS=\"$JAVA_OPTS {{ jboss_eap_java_opts }}\""
  tags:
    - install

- name: "(04) add {{ general.instance_name }} service"
  become: true
  command: "chkconfig --add {{ general.instance_name }}"
  tags:
    - install

- name: "(04) enable {{ general.instance_name }} service"
  become: true
  service:
    name: "{{ general.instance_name }}"
    enabled: yes
  tags:
    - install

# Reloading systemd. Should be executed here and not as a handler.
- name: "(04) {{ general.instance_name }} reload systemd"
  command: systemctl daemon-reload
  tags:
    - install

- name: "(04) remove 20-nproc.conf file"
  file: path={{ item }} state=absent
  with_items:
    - "/etc/security/limits.d/20-nproc.conf"
  ignore_errors: true
  tags:
    - install

- name: "(04) configure {{ owner.user }} ulimit (max. open files for user)"
  lineinfile:
    path: /etc/security/limits.conf
    line: "{{ owner.user }}              -       nofile         65000"
  tags:
    - install

- name: "(04) enforce secure permissions on password files"
  file:
    path: "{{ jboss_eap_domain_home }}/{{ item }}"
    owner: "{{ owner.user }}"
    group: "{{ owner.group }}"
    mode: "0600"
  with_items:
    - mgmt-groups.properties
    - mgmt-users.properties
  tags:
    - install

- name: "(04) create jboss eap administration console user"
  shell: "{{ jboss_eap_bin_dir }}/add-user.sh -dc {{ jboss_eap_domain_home }} -p {{ jboss.console_admin_password }} -u {{ jboss.console_admin_user }} -e -s"
  tags:
    - install

- name: "(04) ensure jboss eap administration console user was created"
  lineinfile:
    name: "{{ jboss_eap_domain_home }}/mgmt-users.properties"
    line: "{{ jboss.console_admin_user }}"
    state: present
  check_mode: yes
  register: admin_console_user
  failed_when: admin_console_user is failed
  tags:
    - install

- block:
    - name: "(04) deploy oracle jdbc driver"
      copy:
        src: "{{ binaries_directory_path }}/ojdbc8.jar"
        dest: "{{ general.download_dir }}/ojdbc8.jar"

    # this will translate to something like:
    # bash -c 'nohup /usr/share/rh-sso-7.2/bin/jboss-cli.sh --command="module add --name=com.oracle --resources=/tmp/ojdbc8.jar --dependencies=javax.api,javax.transaction.api" && pkill -TERM -f "^java(.*)/usr/share/rh-sso-7.2"'
    - name: "(04) execute cli: install oracle dbms module (jdbc driver)"
      become_user: "{{ owner.user }}"
      shell: "bash -c 'nohup {{ jboss_eap_home }}/bin/jboss-cli.sh --command=\"module add --name=com.oracle --resources={{ general.download_dir }}/ojdbc8.jar --dependencies=javax.api,javax.transaction.api\" && pkill -TERM -f \"^java(.*){{ jboss_eap_home }}\"'"
      ignore_errors: yes

    - name: "(04) change permissions on {{ jboss_eap_home }} installation directory"
      file:
        state: directory
        recurse: yes
        path: "{{ jboss_eap_home }}"
        owner: "{{ owner.user }}"
        group: "{{ owner.group }}"

    - name: "(04) ensure jboss eap is running"
      service:
        name: "{{ general.instance_name }}"
        state: started
        enabled: yes
      when: jboss_eap_host_type == "master"

    - name: "wait until the string 'started in' is in the file {{ jboss_eap_log_file }} before continuing"
      wait_for:
        path: "{{ jboss_eap_log_file }}"
        search_regex: "started in"
      when: jboss_eap_host_type == "master"

    - name: "(04) execute cli: install oracle dbms module (jdbc driver)"
      become_user: "{{ owner.user }}"
      shell: "bash -c 'nohup {{ jboss_eap_home }}/bin/jboss-cli.sh --connect --controller=127.0.0.1:9990 --command=\"/profile=auth-server-clustered/subsystem=datasources/jdbc-driver=oracle:add(driver-module-name=com.oracle, driver-name=oracle)\" && pkill -TERM -f \"^java(.*){{ jboss_eap_home }}\"'"
      ignore_errors: yes
      register: oracle_jdbc_driver_cli_result
      when: jboss_eap_host_type == "master"

    - name: "(04) {{ general.instance_name }} reload systemd"
      command: "systemctl stop {{ general.instance_name }}"
      when: jboss_eap_host_type == "master"

  when: config.install_jdbc_oracle|bool
  tags:
    - install

- block:
    - name: "(04) preparing master/slave installation"
      set_fact:
        subtasks_path: "{{ ansible_roles_path }}/{{ role_id }}/{{ subtasks_directory_path }}"

    - name: "(04) prepare master installation"
      include: "{{ subtasks_path }}/01_configure_host_master.yml"
      when: jboss_eap_host_type == "master"

    - name: "(04) prepare slave installation"
      include: "{{ subtasks_path }}/02_configure_host_slave.yml"
      when: jboss_eap_host_type == "slave"
  tags:
    - install
    - patches